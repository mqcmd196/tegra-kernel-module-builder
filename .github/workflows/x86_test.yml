name: x86_test
on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize]

jobs:
  docker:
    runs-on: ubuntu-22.04
    name: x86_test
    steps:
      - name: Free disk space
        run: |
          docker images
          sudo rm -rf "/opt/ghc" || true
          sudo rm -rf "/usr/share/dotnet" || true
          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true
          sudo rm -rf "/usr/local/lib/android" || true
          sudo rm -rf "/usr/local/share/boost" || true
          docker rmi $(docker image ls -q --filter "reference=node*")
          docker rmi $(docker image ls -q --filter "reference=debian*")
          docker rmi $(docker image ls -q --filter "reference=alpine*")
          docker rmi $(docker image ls -q --filter "reference=ubuntu:20.04")
          sudo apt purge -y \
            ansible* \
            aria2* \
            aspnetcore* \
            azure-cli* \
            cabal* \
            clang* \
            dotnet-* \
            firefox* \
            gfortran-* \
            ghc* \
            google-chrome-stable* \
            google-cloud-sdk* \
            heroku* \
            imagemagick* \
            javascript* \
            kubectl* \
            llvm* \
            mono* \
            mysql* \
            nginx* \
            node* \
            npm* \
            nuget* \
            php* \
            postgresql* \
            powershell* \
            rpm* \
            ruby* \
            sqlite3* \
            subversion \
            temurin* \
            tmux* \
            vim* \
            yarn*
          sudo apt-get autoremove -y >/dev/null 2>&1 || true
          sudo apt-get autoclean -y >/dev/null 2>&1 || true
      - name: git checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: build
        run: docker build -t tegra-kernel-module-builder .
      - name: test
        run: docker run --rm -v $(pwd)/example_modules:/l4t/example_modules tegra-kernel-module-builder:latest /bin/bash -c "./prebuild_kernel_module.sh && cd example_modules/rtl8812au && make -j modules"
